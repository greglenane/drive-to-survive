id: fetch-f1-results-2025
namespace: f1-analytics

variables:
  api_url: "https://api.jolpi.ca/ergast/f1/current/last/results/"
  file_name: "results_{{ render(outputs['getApiRound']['vars']['race_year']) }}_{{ render(outputs['getApiRound']['vars']['round_number']) }}_{{ render(outputs['getApiRound']['vars']['racename']) }}.csv"
  sprint_url: "https://api.jolpi.ca/ergast/f1/current/last/sprint/"
  sprint_file: "sprint_{{ render(outputs['getApiRound']['vars']['race_year']) }}_{{ render(outputs['getApiRound']['vars']['round_number']) }}_{{ render(outputs['getApiRound']['vars']['racename']) }}.csv"

tasks:
  - id: getApiRound
    type: io.kestra.plugin.scripts.python.Script
    description: "Get the newest race result round from api. Save api request as json body"
    beforeCommands:
      - pip install requests kestra
    outputFiles:
      - "race_data.json"
    script: |
      import requests
      import json
      from kestra import Kestra
  
      # send api get reuest
      response = requests.get("{{ render(vars.api_url) }}")
      race_data = response.json()

      # save race_data as json
      with open('race_data.json', 'w') as json_file:
        json.dump(race_data, json_file)

      # get round number
      round_number = race_data.get('MRData', {}).get('RaceTable', {}).get('round', None)
      round_number = int(round_number)
      race_name = race_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('raceName', None)
      racename = race_name.replace(" ", "")
      race_year = race_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('season', None)
      race_date = race_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('date', None)

      # save vars for later tasks
      Kestra.outputs({'round_number': round_number})
      Kestra.outputs({'race_name': race_name})
      Kestra.outputs({'racename': racename})
      Kestra.outputs({'race_year': race_year})
      Kestra.outputs({'race_date': race_date})

  - id: getDBrounds
    type: "io.kestra.plugin.jdbc.postgresql.Query"
    description: "Get the most recent race round from DB"
    sql: |
      SELECT COALESCE(MAX(round_number), 0) AS round_number
      FROM "results_{{ outputs.getApiRound.vars.race_year }}";
    fetchType: FETCH_ONE

  - id: new_race_check
    type: io.kestra.plugin.core.flow.If
    description: "check if round in last api pull is greater than max round in db"
    condition: "{{ outputs.getApiRound.vars.round_number > outputs.getDBrounds.row.round_number }}"
    then:
      - id: get_schedule
        type: io.kestra.plugin.jdbc.postgresql.Query
        description: "pull schedule detail for current round. we will use sprint info to check if there is a sprint"
        sql: |
          SELECT * 
          FROM "schedule_{{ outputs.getApiRound.vars.race_year }}"
          WHERE race = '{{ outputs.getApiRound.vars.race_name }}'
        fetchOne: true

      - id: check_sprint
        type: io.kestra.plugin.core.flow.If
        description: "check to see if there is sprint data in the current round schedule"
        condition: "{{ outputs.get_schedule.row.sprint_date }}"
        then:
          - id: transformSprint
            type: io.kestra.plugin.scripts.python.Script
            description: "Get the newest sprint result round from api. Save df as csv for sql import"
            beforeCommands:
              - pip install requests pandas
            outputFiles:
              - "{{ render(vars.sprint_file) }}"
            script: |
              import requests
              import pandas as pd

              response = requests.get("{{ render(vars.sprint_url) }}")
              sprint_data = response.json()
              
              round_number = sprint_data.get('MRData', {}).get('RaceTable', {}).get('round', None)
              race_name = sprint_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('raceName', None)
              race_year = sprint_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('season', None)
              race_date = sprint_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('date', None)

              sprint_data = sprint_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('SprintResults', None)
              df = pd.DataFrame(sprint_data)

              df['driver_id'] = df['Driver'].apply(lambda x: x['driverId'])
              df['constructor_id'] = df['Constructor'].apply(lambda x: x['constructorId'])
              df['driver'] = df['Driver'].apply(lambda x: f"{x['givenName']} {x['familyName']}")
              df['constructor'] = df['Constructor'].apply(lambda x: x['name'])
              df['time'] = df['Time'].apply(lambda x: x['time'] if isinstance(x, dict) else None)

              df.insert(0, 'race_name', race_name)
              df.insert(1, 'race_date', race_date)
              df.insert(2, 'race_year', race_year)
              df.insert(3, 'round_number', round_number)

              df = df[['race_name', 'race_date', 'race_year', 'round_number', 'position', 'points', 'driver', 'driver_id', 'constructor', 'constructor_id', 'grid', 'status',]]

              # write df to csv
              df.to_csv("{{ render(vars.sprint_file) }}", index=False)

          - id: copy_in_sprint
            type: io.kestra.plugin.jdbc.postgresql.CopyIn
            description: "import csv from transformSprint into sprint results in DB"
            format: CSV
            from: "{{ outputs['transformSprint']['outputFiles'][render(vars.sprint_file)] }}"
            table: "sprint_{{ outputs.getApiRound.vars.race_year }}"
            header: true
            delimiter: ","
        else:
          - id: noSprint
            type: io.kestra.plugin.core.log.Log
            message: "There is no sprint in {{ outputs.getApiRound.vars.round_number }}"

      - id: transformApi
        type: io.kestra.plugin.scripts.python.Script
        description: "Get the newest race result round from api. Save race results as .csv for later use."
        beforeCommands:
          - pip install pandas
        outputFiles:
          - "{{ render(vars.file_name) }}"
        script: |      
          import json
          import pandas as pd

          # Load in API request variable as JSON body
          with open("{{ outputs['getApiRound']['outputFiles']['race_data.json'] }}", 'r') as json_file:
              race_data = json.load(json_file)

          # Get race information: round, name, year, date
          round_number = race_data.get('MRData', {}).get('RaceTable', {}).get('round', None)
          race_name = race_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('raceName', None)
          race_year = race_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('season', None)
          race_date = race_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('date', None)

          # Get results from race data and save as df
          results = race_data.get('MRData', {}).get('RaceTable', {}).get('Races', [{}])[0].get('Results', None)
          df = pd.DataFrame(results)

          # Transform df and add race level info as columns
          df['driver_id'] = df['Driver'].apply(lambda x: x['driverId'])
          df['constructor_id'] = df['Constructor'].apply(lambda x: x['constructorId'])
          df['driver'] = df['Driver'].apply(lambda x: f"{x['givenName']} {x['familyName']}")
          df['constructor'] = df['Constructor'].apply(lambda x: x['name'])
          df['time'] = df['Time'].apply(lambda x: x['time'] if isinstance(x, dict) else None)
          df['fastest_lap_rank'] = df['FastestLap'].apply(lambda x: x['rank'] if isinstance(x, dict) else None)

          df.insert(0, 'race_name', race_name)
          df.insert(1, 'race_date', race_date)
          df.insert(2, 'race_year', race_year)
          df.insert(3, 'round_number', round_number)

          # Replace grid value of 0 with 21
          df['grid'].replace(0, 21, inplace=True)

          # Select columns of interest
          df = df[['race_name', 'race_date', 'race_year', 'round_number', 'position', 'points', 'fastest_lap_rank', 'driver', 'driver_id', 'constructor','constructor_id', 'grid',          'status']]

          # Write df to CSV
          df.to_csv("{{ render(vars.file_name) }}", index=False)


      - id: copy_in
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        format: CSV
        from: "{{ outputs['transformApi']['outputFiles'][render(vars.file_name)] }}"
        table: "results_{{ outputs.getApiRound.vars.race_year }}"
        header: true
        delimiter: ","

      - id: facts_results
        type: io.kestra.plugin.jdbc.postgresql.Queries
        description: "truncate and recreate the facts table which will feed the visualizations"
        sql: |
          drop table if exists "picks_results_{{ outputs.getApiRound.vars.race_year }}";
          create table "picks_results_{{ outputs.getApiRound.vars.race_year }}" as
          with picks_join as (select picks.name,
                                     picks.race_date,
                                     picks.race_name,
                                     picks.driver,
                                     results.race_year,
                                     results.round_number,
                                     results."position" as gp_position,
                                     sprint.position as sprint_position,
                                     results.fastest_lap_rank,
                                     results.driver_id,
                                     results.constructor,
                                     results.constructor_id,
                                     results.grid,
                                     results.status,
                                     expected.gp as expected_points,
                                     gp_scoring.gp as gp_points,
                                     sprint_scoring.sprint as sprint_points,
                                     fastlap_scoring.fastest_lap as fastest_lap_points
                              from "picks_{{ outputs.getApiRound.vars.race_year }}" picks
                                  left join "results_{{ outputs.getApiRound.vars.race_year }}" results ON picks.driver = results.driver AND
                                                                                                          picks.race_name = results.race_name
                                  left join "sprint_{{ outputs.getApiRound.vars.race_year }}" sprint ON picks.driver = sprint.driver AND
                                                                                                      picks.race_name = sprint.race_name
                                  left join scoring expected ON results.grid = expected."position"
                                  left join scoring gp_scoring ON results."position" = gp_scoring."position"
                                  left join scoring sprint_scoring ON sprint."position" = sprint_scoring."position"
                                  left join scoring fastlap_scoring ON results.fastest_lap_rank = fastlap_scoring."position"),
          total as (select name,
                    race_date,
                    race_year,
                    race_name,
                    round_number,
                    driver,
                    driver_id,
                    constructor,
                    constructor_id,
                    grid,
                    expected_points,
                    gp_position,
                    sprint_position,
                    fastest_lap_rank,
                    gp_points,
                    sprint_points,
                    fastest_lap_points,
                    (COALESCE(gp_points, 0) + COALESCE(sprint_points, 0) + COALESCE(fastest_lap_points, 0)) AS total_points
          from picks_join)
          select *,
                 (COALESCE(total_points,0) - COALESCE(expected_points,0)) as points_variance,
                 sum(total_points) over (partition by name order by round_number) as cumulative_points,
                 rank() over (order by total_points desc) as rank_best_week,
                 rank() over (partition by round_number order by total_points desc) as rank_individual_gp,
                 avg(total_points) over (partition by name) as avg_individual_points_gp
          from total;
          
    else:
      - id: when_false
        type: io.kestra.plugin.core.log.Log
        message: "testNo new race results. Results are up to date through round {{ outputs.getDBrounds.row.round_number }}"

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      username: "{{ kv('POSTGRES_USER') }}"
      password: "{{ kv('POSTGRES_PASSWORD') }}"
      url: "{{ kv('POSTGRES_URL') }}"